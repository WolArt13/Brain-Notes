from fastapi_mail import FastMail, MessageSchema, ConnectionConfig
from pydantic import EmailStr
from app.config import settings
from app.defs.auth.mail_templates_defs import get_verification_email_html, get_password_reset_email_html, get_welcome_email_html, get_change_email_html
from app.defs.auth.email_utils import generate_verification_token

mail_config = ConnectionConfig(
    MAIL_USERNAME=settings.MAIL_USERNAME,
    MAIL_PASSWORD=settings.MAIL_PASSWORD,
    MAIL_FROM=settings.MAIL_FROM,
    MAIL_PORT=settings.MAIL_PORT,
    MAIL_SERVER=settings.MAIL_SERVER,
    MAIL_STARTTLS=settings.MAIL_TLS,
    MAIL_SSL_TLS=settings.MAIL_SSL,
    USE_CREDENTIALS=True,
    VALIDATE_CERTS=True
)

fastmail = FastMail(mail_config)

async def send_verification_email(email: EmailStr, username: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    token = generate_verification_token(email)
    verification_link = f"{settings.APP_URL}/auth/verify?token={token}"

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π HTML —à–∞–±–ª–æ–Ω
    html_content = get_verification_email_html(username, verification_link)

    # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = MessageSchema(
        subject="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - Brain Notes",
        recipients=[email],
        body=html_content,
        subtype="html"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    await fastmail.send_message(message)


async def send_password_reset_email(email: EmailStr, reset_token: str, username: str = None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    reset_link = f"{settings.APP_URL}/auth/reset-password?token={reset_token}"

    # –ï—Å–ª–∏ username –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å email
    if not username:
        username = email.split('@')[0]

    # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞)
    expire_hours = getattr(settings, 'PASSWORD_RESET_TOKEN_EXPIRE_HOURS', 24)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π HTML —à–∞–±–ª–æ–Ω
    html_content = get_password_reset_email_html(
        username=username,
        reset_link=reset_link,
        expire_hours=expire_hours
    )

    # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = MessageSchema(
        subject="–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - Brain Notes",
        recipients=[email],
        body=html_content,
        subtype="html"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    await fastmail.send_message(message)

async def send_change_mail_email(email: EmailStr, username: str = None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –¥–ª—è —Å–º–µ–Ω—ã email
    """
    token = generate_verification_token(email)

    reset_link = f"{settings.APP_URL}/auth/change-email?token={token}"

    if not username:
        username = email.split('@')[0]

    expire_hours = getattr(settings, 'EMAIL_CHANGE_TOKEN_EXPIRE_HOURS', 24)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π HTML —à–∞–±–ª–æ–Ω
    html_content = get_password_reset_email_html(
        username=username,
        reset_link=reset_link,
        expire_hours=expire_hours
    )

    # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = MessageSchema(
        subject="–°–º–µ–Ω–∞ email - Brain Notes",
        recipients=[email],
        body=html_content,
        subtype="html"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    await fastmail.send_message(message)

async def send_welcome_email(email: EmailStr, username: str) -> None:
    """
    –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email.
    """
    # URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"
    dashboard_url = f"{settings.APP_URL}/dashboard"

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π HTML —à–∞–±–ª–æ–Ω
    html_content = get_welcome_email_html(username, dashboard_url)

    # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = MessageSchema(
        subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Brain Notes! üéâ",
        recipients=[email],
        body=html_content,
        subtype="html"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    await fastmail.send_message(message)